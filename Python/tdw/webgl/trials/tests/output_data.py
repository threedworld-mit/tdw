# AUTOGENERATED FROM C#. DO NOT MODIFY.

from abc import ABC
from tdw.webgl.trials.tests.automated_test import AutomatedTest
from typing import Dict


class OutputData(AutomatedTest, ABC):
    """
    Abstract base class for an automated output data test trial.
    """

    def __init__(self, scene_name: str = "box_room_2018", model_name: str = "octahedron", scale: Dict[str, float] = None, grid_size: Dict[str, int] = None, force: Dict[str, float] = None, num_frames: int = 3600, frames_per_forces: int = 300):
        """
        :param scene_name: The name of the scene.
        :param model_name: The name of the test model.
        :param scale: The scale of the test model.
        :param grid_size: The size of the grid of objects. This determines how many objects there are and where they are. This vector will be multiplied by a factor to span the room.
        :param force: Apply this force to each object.
        :param num_frames: Run the simulation for this many frames.
        :param frames_per_forces: Re-apply forces after this many frames have elapsed.
        """

        super().__init__()
        """:field
        The name of the scene.
        """
        self.scene_name: str = scene_name
        """:field
        The name of the test model.
        """
        self.model_name: str = model_name
        if scale is None:
            """:field
            The scale of the test model.
            """
            self.scale: Dict[str, float] = {"x": 0.1, "y": 0.1, "z": 0.1}
        else:
            self.scale = scale
        if grid_size is None:
            """:field
            The size of the grid of objects. This determines how many objects there are and where they are. This vector will be multiplied by a factor to span the room.
            """
            self.grid_size: Dict[str, int] = {"x": 5, "y": 4, "z": 5}
        else:
            self.grid_size = grid_size
        if force is None:
            """:field
            Apply this force to each object.
            """
            self.force: Dict[str, float] = {"x": 0, "y": 5, "z": -5}
        else:
            self.force = force
        """:field
        Run the simulation for this many frames.
        """
        self.num_frames: int = num_frames
        """:field
        Re-apply forces after this many frames have elapsed.
        """
        self.frames_per_forces: int = frames_per_forces
