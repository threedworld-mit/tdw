# AUTOGENERATED FROM C#. DO NOT MODIFY.

from abc import ABC
from tdw.commands.object_command import ObjectCommand
from tdw.container_data.container_tag import ContainerTag
from typing import Dict


class AddContainerShapeCommand(ObjectCommand, ABC):
    """
    These commands add container shapes to an object. Container shapes will check each frame for whether their container shapes overlap with other objects and send output data accordingly.
    """

    def __init__(self, id: int, tag: ContainerTag, container_id: int = 0, position: Dict[str, float] = None):
        """
        :param id: The unique object ID.
        :param tag: The container tag.
        :param container_id: The ID of this container shape. This can be used to differentiate between multiple container shapes belonging to the same object.
        :param position: The position of the container shape relative to the parent object.
        """

        super().__init__(id=id)
        """:field
        The ID of this container shape. This can be used to differentiate between multiple container shapes belonging to the same object.
        """
        self.container_id: int = container_id
        if position is None:
            """:field
            The position of the container shape relative to the parent object.
            """
            self.position: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.position = position
        """:field
        The container tag.
        """
        self.tag: ContainerTag = tag
