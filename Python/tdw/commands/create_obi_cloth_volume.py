# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.create_obi_cloth_command import CreateObiClothCommand
from tdw.obi_data.cloth.cloth_material import ClothMaterial
from tdw.obi_data.cloth.volume_type import ClothVolumeType
from typing import Dict


class CreateObiClothVolume(CreateObiClothCommand):
    """
    Create an Obi cloth volume object.
    """

    def __init__(self, cloth_material: ClothMaterial, volume_type: ClothVolumeType, scale_factor: Dict[str, float] = None, pressure: float = 0.5, position: Dict[str, float] = None, rotation: Dict[str, float] = None, id: int = 0, solver_id: int = 0):
        """
        :param cloth_material: The type of cloth "material", as defined by constraint settings.
        :param volume_type: The type of cloth sheet to create.
        :param scale_factor: The scale factor of the cloth object.
        :param pressure: The amount of "inflation" of this cloth volume.
        :param position: The position of the Obi actor.
        :param rotation: The rotation of the Obi actor in Euler angles.
        :param id: The unique ID of the emitter.
        :param solver_id: The ID of the Obi solver.
        """

        super().__init__(cloth_material=cloth_material, position=position, rotation=rotation, id=id, solver_id=solver_id)
        if scale_factor is None:
            """:field
            The scale factor of the cloth object.
            """
            self.scale_factor: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.scale_factor = scale_factor
        """:field
        The type of cloth sheet to create.
        """
        self.volume_type: ClothVolumeType = volume_type
        """:field
        The amount of "inflation" of this cloth volume.
        """
        self.pressure: float = pressure
