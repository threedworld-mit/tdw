import numpy as np
from tdw.controller import Controller
from tdw.add_ons.log_playback import LogPlayback
from tdw.output_data import OutputData, SegmentationColors, StaticRobot

"""
Load a log file generated by a variant of `determinism_rng.py`.

Assert that the joint IDs, sub-object IDs, and all segmentation colors are the same as what was logged.
"""

joint_ids = {0: np.array([147, 157, 175]),
             1008269081: np.array([195, 94, 113]),
             2005789796: np.array([0, 154, 146]),
             1706746116: np.array([138, 76, 169]),
             1922776196: np.array([207, 131, 96]),
             216757113: np.array([177, 130, 222]),
             1704308182: np.array([185, 30, 134])}
object_ids = {1: np.array([199, 145, 100]),
              1755192844: np.array([216, 138, 133])}
c = Controller()
playback = LogPlayback()
playback.load("determinism_log.txt")
c.add_ons.append(playback)
while len(playback.playback) > 0:
    resp = c.communicate([])
    for i in range(len(resp) - 1):
        r_id = OutputData.get_data_type_id(resp[i])
        if r_id == "segm":
            segm = SegmentationColors(resp[i])
            for j in range(segm.get_num()):
                object_id = segm.get_object_id(j)
                color = segm.get_object_color(j)
                assert object_id in object_ids, f"Object ID not found: {object_id}"
                assert (color == object_ids[object_id]).all(), f"Bad segmentation color for object {object_id}: {color}"
        elif r_id == "srob":
            srob = StaticRobot(resp[i])
            for j in range(srob.get_num_joints()):
                joint_id = srob.get_joint_id(j)
                color = srob.get_joint_segmentation_color(j)
                assert joint_id in joint_ids, f"Joint ID not found: {joint_id}"
                assert (color == joint_ids[joint_id]).all(), f"Bad segmentation color for joint {joint_id}: {color}"
c.communicate({"$type": "terminate"})
