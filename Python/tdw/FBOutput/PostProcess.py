# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import tdw.flatbuffers

class PostProcess(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPostProcess(cls, buf, offset):
        n = tdw.flatbuffers.encode.Get(tdw.flatbuffers.packer.uoffset, buf, offset)
        x = PostProcess()
        x.Init(buf, n + offset)
        return x

    # PostProcess
    def Init(self, buf, pos):
        self._tab = tdw.flatbuffers.table.Table(buf, pos)

    # PostProcess
    def Enabled(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(tdw.flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PostProcess
    def AmbientOcclusionIntensity(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def AmbientOcclusionThicknessModifier(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def Aperture(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def FocusDistance(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def Contrast(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def PostExposure(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def Saturation(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcess
    def ScreenSpaceReflections(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(tdw.flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # PostProcess
    def Vignette(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(tdw.flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def PostProcessStart(builder): builder.StartObject(10)
def PostProcessAddEnabled(builder, enabled): builder.PrependBoolSlot(0, enabled, 0)
def PostProcessAddAmbientOcclusionIntensity(builder, ambientOcclusionIntensity): builder.PrependFloat32Slot(1, ambientOcclusionIntensity, 0.0)
def PostProcessAddAmbientOcclusionThicknessModifier(builder, ambientOcclusionThicknessModifier): builder.PrependFloat32Slot(2, ambientOcclusionThicknessModifier, 0.0)
def PostProcessAddAperture(builder, aperture): builder.PrependFloat32Slot(3, aperture, 0.0)
def PostProcessAddFocusDistance(builder, focusDistance): builder.PrependFloat32Slot(4, focusDistance, 0.0)
def PostProcessAddContrast(builder, contrast): builder.PrependFloat32Slot(5, contrast, 0.0)
def PostProcessAddPostExposure(builder, postExposure): builder.PrependFloat32Slot(6, postExposure, 0.0)
def PostProcessAddSaturation(builder, saturation): builder.PrependFloat32Slot(7, saturation, 0.0)
def PostProcessAddScreenSpaceReflections(builder, screenSpaceReflections): builder.PrependBoolSlot(8, screenSpaceReflections, 0)
def PostProcessAddVignette(builder, vignette): builder.PrependBoolSlot(9, vignette, 0)
def PostProcessEnd(builder): return builder.EndObject()
