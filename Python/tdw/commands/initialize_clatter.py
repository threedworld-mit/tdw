# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.command import Command
from tdw.physics_audio.impact_material import ImpactMaterial


class InitializeClatter(Command):
    """
    Initialize Clatter. This command must be sent after each ClatterizeObject command has been sent (though it can be in the same list of commands).
    """

    def __init__(self, generate_random_seed: bool = True, random_seed: int = 0, simulation_amp: float = 0.5, min_collision_speed: float = 0.00001, area_new_collision: float = 1e-5, scrape_angle: float = 80, impact_area_ratio: float = 5, roll_angular_speed: float = 1, max_contact_separation: float = 1e-8, filter_duplicates: bool = True, max_num_contacts: int = 16, sound_timeout: float = 0.1, prevent_impact_distortion: bool = True, clamp_impact_contact_time: bool = True, min_time_between_impacts: float = 0.25, max_time_between_impacts: float = 3, scrape_amp: float = 1, roughness_ratio_exponent: float = 0.7, max_scrape_speed: float = 5, loop_scrape_audio: bool = True, environment_impact_material: ImpactMaterial = ImpactMaterial.wood_medium, environment_size: int = 4, environment_amp: float = 0.5, environment_resonance: float = 0.1, environment_mass: float = 100, resonance_audio: bool = False, max_num_events: int = 200, roll_substitute: str = "impact"):
        """
        :param generate_random_seed: If True, the random seed will be explicitly set.
        :param random_seed: The random seed. Ignored if generate_random_seed == False.
        :param simulation_amp: The overall amplitude of the simulation. The amplitude of generated audio is scaled by this factor. Must be between 0 and 0.99
        :param min_collision_speed: The minimum collision speed in meters per second. If a `CollisionEvent` has a speed less than this, it is ignored.
        :param area_new_collision: On a collision stay event, if the previous area is None and the current area is greater than this, the audio event is either an impact or a scrape; see scrape_angle.
        :param scrape_angle: On a collision stay event, there is a large new contact area (see area_new_collision), if the angle in degrees between Vector3.up and the normalized relative velocity of the collision is greater than this value, then the audio event is a scrape. Otherwise, it's an impact.
        :param impact_area_ratio: On a collision stay event, if the area of the collision increases by at least this factor, the audio event is an impact.
        :param roll_angular_speed: On a collision stay event, if the angular speed in meters per second is greater than or equal to this value, the audio event is a roll; otherwise, it's a scrape.
        :param max_contact_separation: On a collision stay event, if we think the collision is an impact but any of the contact points are this far away or greater, the audio event is none.
        :param filter_duplicates: Each object in Clatter tries to filter duplicate collision events in two ways. First, it will remove any reciprocal pairs of objects, i.e. it will accept a collision between objects 0 and 1 but not objects 1 and 0. Second, it will register only the first collision between objects per main-thread update (multiple collisions can be registered because there are many physics fixed update calls in between). To allow duplicate events, set this field to False.
        :param max_num_contacts: The maximum number of contact points that will be evaluated when setting the contact area and speed. A higher number can mean somewhat greater precision but at the cost of performance.
        :param sound_timeout: Timeout and destroy a Sound if it hasn't received new samples data after this many seconds.
        :param prevent_impact_distortion: If True, clamp impact audio amplitude values to less than or equal to 0.99, preventing distortion.
        :param clamp_impact_contact_time: If True, clamp impact contact time values to a plausible value. Set this to False if you want to generate impacts with unusually long contact times.
        :param min_time_between_impacts: The minimum time in seconds between impacts. If an impact occurs an this much time hasn't yet elapsed, the impact will be ignored. This can prevent strange "droning" sounds caused by too many impacts in rapid succession.
        :param max_time_between_impacts: The maximum time in seconds between impacts. After this many seconds, this impact series will end and a subsequent impact collision will start a new Impact.
        :param scrape_amp: When setting the amplitude for a scrape, multiply simulation_amp by this factor.
        :param roughness_ratio_exponent: An exponent for each scrape material's roughness ratio. A lower value will cause all scrape audio to be louder relative to impact audio.
        :param max_scrape_speed: For the purposes of scrape audio generation, the collision speed is clamped to this maximum value.
        :param loop_scrape_audio: If True, fill in silences while scrape audio is being generated by continuously looping the current chunk of scrape audio until either there is new scrape audio or the scrape event ends.
        :param environment_impact_material: The impact material for the environment (floors, walls, etc.).
        :param environment_size: The impact material size bucket for the environment (floors, walls, etc.).
        :param environment_amp: The amp value for the environment (floors, walls, etc.).
        :param environment_resonance: The resonance value for the environment (floors, walls, etc.).
        :param environment_mass: For the purposes of audio generation, this is the mass of the environment (floors, walls, etc.).
        :param resonance_audio: If True, use Resonance Audio to play audio.
        :param max_num_events: The maximum number of impacts, scrapes, and rolls that can be processed on a single communicate() call.
        :param roll_substitute: Roll audio events are not yet supported in Clatter. If a roll is registered, it is instead treated as this value.
        """

        super().__init__()
        """:field
        If True, the random seed will be explicitly set.
        """
        self.generate_random_seed: bool = generate_random_seed
        """:field
        The random seed. Ignored if generate_random_seed == False.
        """
        self.random_seed: int = random_seed
        """:field
        The overall amplitude of the simulation. The amplitude of generated audio is scaled by this factor. Must be between 0 and 0.99
        """
        self.simulation_amp: float = simulation_amp
        """:field
        The minimum collision speed in meters per second. If a `CollisionEvent` has a speed less than this, it is ignored.
        """
        self.min_collision_speed: float = min_collision_speed
        """:field
        On a collision stay event, if the previous area is None and the current area is greater than this, the audio event is either an impact or a scrape; see scrape_angle.
        """
        self.area_new_collision: float = area_new_collision
        """:field
        On a collision stay event, there is a large new contact area (see area_new_collision), if the angle in degrees between Vector3.up and the normalized relative velocity of the collision is greater than this value, then the audio event is a scrape. Otherwise, it's an impact.
        """
        self.scrape_angle: float = scrape_angle
        """:field
        On a collision stay event, if the area of the collision increases by at least this factor, the audio event is an impact.
        """
        self.impact_area_ratio: float = impact_area_ratio
        """:field
        On a collision stay event, if the angular speed in meters per second is greater than or equal to this value, the audio event is a roll; otherwise, it's a scrape.
        """
        self.roll_angular_speed: float = roll_angular_speed
        """:field
        On a collision stay event, if we think the collision is an impact but any of the contact points are this far away or greater, the audio event is none.
        """
        self.max_contact_separation: float = max_contact_separation
        """:field
        Each object in Clatter tries to filter duplicate collision events in two ways. First, it will remove any reciprocal pairs of objects, i.e. it will accept a collision between objects 0 and 1 but not objects 1 and 0. Second, it will register only the first collision between objects per main-thread update (multiple collisions can be registered because there are many physics fixed update calls in between). To allow duplicate events, set this field to False.
        """
        self.filter_duplicates: bool = filter_duplicates
        """:field
        The maximum number of contact points that will be evaluated when setting the contact area and speed. A higher number can mean somewhat greater precision but at the cost of performance.
        """
        self.max_num_contacts: int = max_num_contacts
        """:field
        Timeout and destroy a Sound if it hasn't received new samples data after this many seconds.
        """
        self.sound_timeout: float = sound_timeout
        """:field
        If True, clamp impact audio amplitude values to less than or equal to 0.99, preventing distortion.
        """
        self.prevent_impact_distortion: bool = prevent_impact_distortion
        """:field
        If True, clamp impact contact time values to a plausible value. Set this to False if you want to generate impacts with unusually long contact times.
        """
        self.clamp_impact_contact_time: bool = clamp_impact_contact_time
        """:field
        The minimum time in seconds between impacts. If an impact occurs an this much time hasn't yet elapsed, the impact will be ignored. This can prevent strange "droning" sounds caused by too many impacts in rapid succession.
        """
        self.min_time_between_impacts: float = min_time_between_impacts
        """:field
        The maximum time in seconds between impacts. After this many seconds, this impact series will end and a subsequent impact collision will start a new Impact.
        """
        self.max_time_between_impacts: float = max_time_between_impacts
        """:field
        When setting the amplitude for a scrape, multiply simulation_amp by this factor.
        """
        self.scrape_amp: float = scrape_amp
        """:field
        An exponent for each scrape material's roughness ratio. A lower value will cause all scrape audio to be louder relative to impact audio.
        """
        self.roughness_ratio_exponent: float = roughness_ratio_exponent
        """:field
        For the purposes of scrape audio generation, the collision speed is clamped to this maximum value.
        """
        self.max_scrape_speed: float = max_scrape_speed
        """:field
        If True, fill in silences while scrape audio is being generated by continuously looping the current chunk of scrape audio until either there is new scrape audio or the scrape event ends.
        """
        self.loop_scrape_audio: bool = loop_scrape_audio
        """:field
        The impact material for the environment (floors, walls, etc.).
        """
        self.environment_impact_material: ImpactMaterial = environment_impact_material
        """:field
        The impact material size bucket for the environment (floors, walls, etc.).
        """
        self.environment_size: int = environment_size
        """:field
        The amp value for the environment (floors, walls, etc.).
        """
        self.environment_amp: float = environment_amp
        """:field
        The resonance value for the environment (floors, walls, etc.).
        """
        self.environment_resonance: float = environment_resonance
        """:field
        For the purposes of audio generation, this is the mass of the environment (floors, walls, etc.).
        """
        self.environment_mass: float = environment_mass
        """:field
        If True, use Resonance Audio to play audio.
        """
        self.resonance_audio: bool = resonance_audio
        """:field
        The maximum number of impacts, scrapes, and rolls that can be processed on a single communicate() call.
        """
        self.max_num_events: int = max_num_events
        """:field
        Roll audio events are not yet supported in Clatter. If a roll is registered, it is instead treated as this value.
        """
        self.roll_substitute: str = roll_substitute
