# AUTOGENERATED FROM C#. DO NOT MODIFY.

from typing import Dict, List
from tdw.webgl.trials.trial import Trial


class WheresWaldo(Trial):
    """
    There is a grid of objects in a room. The user must click the target object. If the user clicks the wrong object, a force is applied.
    """

    def __init__(self, random_seed: int = None, scene_name: str = "box_room_2018", model_names: List[str] = None, target_model_name: str = "sphere", target_object_color: Dict[str, float] = None, target_object_scale: float = 0.2, num_columns: int = 10, num_rows: int = 10, avatar_body_size: Dict[str, float] = None, avatar_body_offset: Dict[str, float] = None, avatar_body_color: Dict[str, float] = None, force: float = 10, framerate: int = 60, render_quality: int = 5):
        """
        :param random_seed: The random seed. Can be null. If null, the seed is random.
        :param scene_name: The name of the scene. This should be a one-room interior scene.
        :param model_names: The names of all possible models. Objects in the scene will be models randomly selected from this list.
        :param target_model_name: The model name of the target object.
        :param target_object_color: The color of the target object.
        :param target_object_scale: The uniform scale in meters of the target object.
        :param num_columns: The number of objects across the x axis.
        :param num_rows: The number of objects across the z axis.
        :param avatar_body_size: The size of the avatar's visual body.
        :param avatar_body_offset: Offset the avatar's visual body from the camera by this distance.
        :param avatar_body_color: The color of the avatar's visual body.
        :param force: Apply this much force to a non-target object when clicked.
        :param framerate: The target framerate.
        :param render_quality: The render quality (0 to 5, where 5 is best).
        """

        super().__init__(framerate=framerate, render_quality=render_quality)
        """:field
        The random seed. Can be null. If null, the seed is random.
        """
        self.random_seed: int = random_seed
        """:field
        The name of the scene. This should be a one-room interior scene.
        """
        self.scene_name: str = scene_name
        if model_names is None:
            """:field
            The names of all possible models. Objects in the scene will be models randomly selected from this list.
            """
            self.model_names: List[str] = ["candle", "chista_slice_of_teak_table", "coffee_005_13", "hiker_backpack", "jug02", "juicer", "kettle", "monster_beats_studio", "pot", "skillet_closed", "skillet_open", "skillet_open_no_lid", "soup_ladle_black_02", "spagetti-server", "spatula2", "toaster_002", "trashbin", "v3_tf_04_01", "vase_01", "vase_02", "vase_03", "vase_05", "vase_06", "whisk", "zenblocks"]
        else:
            self.model_names = model_names
        """:field
        The model name of the target object.
        """
        self.target_model_name: str = target_model_name
        if target_object_color is None:
            """:field
            The color of the target object.
            """
            self.target_object_color: Dict[str, float] = {"r": 1, "g": 0, "b": 0, "a": 1}
        else:
            self.target_object_color = target_object_color
        """:field
        The uniform scale in meters of the target object.
        """
        self.target_object_scale: float = target_object_scale
        """:field
        The number of objects across the x axis.
        """
        self.num_columns: int = num_columns
        """:field
        The number of objects across the z axis.
        """
        self.num_rows: int = num_rows
        if avatar_body_size is None:
            """:field
            The size of the avatar's visual body.
            """
            self.avatar_body_size: Dict[str, float] = {"x": 3, "y": 0.5, "z": 1.8}
        else:
            self.avatar_body_size = avatar_body_size
        if avatar_body_offset is None:
            """:field
            Offset the avatar's visual body from the camera by this distance.
            """
            self.avatar_body_offset: Dict[str, float] = {"x": 3, "y": 0.2, "z": 0}
        else:
            self.avatar_body_offset = avatar_body_offset
        if avatar_body_color is None:
            """:field
            The color of the avatar's visual body.
            """
            self.avatar_body_color: Dict[str, float] = {"r": 0, "g": 0, "b": 1, "a": 1}
        else:
            self.avatar_body_color = avatar_body_color
        """:field
        Apply this much force to a non-target object when clicked.
        """
        self.force: float = force
