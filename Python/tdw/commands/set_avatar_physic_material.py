# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.avatar_rigidbody_command import AvatarRigidbodyCommand


class SetAvatarPhysicMaterial(AvatarRigidbodyCommand):
    """
    Set the physic material of the avatar's main body collider and apply friction and bounciness values. Friction and bounciness don't affect physics as much as drag and angular_drag (see set_avatar_drag). LOW friction values and HIGH bounciness means that the avatar won't "climb" up other objects.
    """

    def __init__(self, bounciness: float, static_friction: float, dynamic_friction: float, avatar_id: str = "a"):
        """
        :param bounciness: The bounciness of the avatar. A higher value means that the avatar will bounce without losing much energy. Must be between 0 and 1.
        :param static_friction: Friction when the avatar is not moving. A higher value means that a lot of force will be needed to make the avatar start moving. Must be between 0 and 1.
        :param dynamic_friction: Friction when the avatar is already moving. A higher value means that the avatar will come to rest very quickly. Must be between 0 and 1.
        :param avatar_id: The ID of the avatar.
        """

        super().__init__(avatar_id=avatar_id)
        """:field
        Friction when the avatar is already moving. A higher value means that the avatar will come to rest very quickly. Must be between 0 and 1.
        """
        self.dynamic_friction: float = dynamic_friction
        """:field
        Friction when the avatar is not moving. A higher value means that a lot of force will be needed to make the avatar start moving. Must be between 0 and 1.
        """
        self.static_friction: float = static_friction
        """:field
        The bounciness of the avatar. A higher value means that the avatar will bounce without losing much energy. Must be between 0 and 1.
        """
        self.bounciness: float = bounciness
