# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.flex_container_command import FlexContainerCommand
from typing import Dict, List


class CreateFlexContainer(FlexContainerCommand):
    """
    Create a Flex Container. The ID of this container is the quantity of containers in the scene prior to adding it.
    """

    def __init__(self, radius: float = 0.1875, solid_rest: float = 0.125, fluid_rest: float = 0.1125, static_friction: float = 0.5, dynamic_friction: float = 0.5, particle_friction: float = 0.5, collision_distance: float = 0.0625, substep_count: int = 3, iteration_count: int = 8, damping: float = 1, drag: float = 0.0, shape_collision_margin: float = 0.0, planes: List[Dict[str, float]] = None, cohesion: float = 0.025, surface_tension: float = 0.0, viscocity: float = 0.001, vorticity: float = 0.0, buoyancy: float = 1.0, adhesion: float = 0.0, anisotropy_scale: float = 2.0, max_particles: int = 10000, max_neighbors: int = 100, sleep_threshold: float = 0.0, restitution: float = 0):
        """
        :param radius: The maximum interaction radius for particles.
        :param solid_rest: The distance non-fluid particles attempt to maintain from each other, must be in the range (0, radius].
        :param fluid_rest: The distance fluid particles are spaced at the rest density, must be in the range (0, radius], typically 50%-70% of radius.
        :param static_friction: The coefficient of static friction used when colliding against shapes.
        :param dynamic_friction: The coefficient of dynamic friction used when colliding against shapes.
        :param particle_friction: The coefficient of friction used when colliding particles.
        :param collision_distance: The Distance particles maintain against shapes. Note that for robust collision against triangle meshes this distance should be greater than zero.
        :param substep_count: The time dt will be divided into the number of sub-steps given by this parameter.
        :param iteration_count: The number of solver iterations to perform per-substep.
        :param damping: The viscous drag force. This applies a force proportional, and opposite to, the particle velocity.
        :param drag: The drag force applied to cloth particles.
        :param shape_collision_margin: Increases the radius used during contact finding against kinematic shapes.
        :param planes: Defines the boundary planes within which the particles can move.
        :param cohesion: Controls how strongly particles hold each other together.
        :param surface_tension: Controls how strongly particles attempt to minimize surface area.
        :param viscocity: Smoothes particle velocity using XSPH viscocity.
        :param vorticity: Increases vorticity by appying rotational foces to particles.
        :param buoyancy: Gravity is scaled by this value for fluid particles.
        :param adhesion: Controls how strongly particles stick to surfaces they hit.
        :param anisotropy_scale: Controls level of anisotropy when rendering ellipsoids. Useful for fluids.
        :param max_particles: Maximum number of particles for the container.
        :param max_neighbors: Maximum number of neighbors for the container.
        :param sleep_threshold: Particles with a velocity magnitude greater than this threshold will be considered fixed.
        :param restitution: Coefficient of restitution used when colliding against shapes. Particle collisions are always inelastic.
        """

        super().__init__()
        """:field
        The maximum interaction radius for particles.
        """
        self.radius: float = radius
        """:field
        The distance non-fluid particles attempt to maintain from each other, must be in the range (0, radius].
        """
        self.solid_rest: float = solid_rest
        """:field
        The distance fluid particles are spaced at the rest density, must be in the range (0, radius], typically 50%-70% of radius.
        """
        self.fluid_rest: float = fluid_rest
        """:field
        The coefficient of static friction used when colliding against shapes.
        """
        self.static_friction: float = static_friction
        """:field
        The coefficient of dynamic friction used when colliding against shapes.
        """
        self.dynamic_friction: float = dynamic_friction
        """:field
        The coefficient of friction used when colliding particles.
        """
        self.particle_friction: float = particle_friction
        """:field
        The Distance particles maintain against shapes. Note that for robust collision against triangle meshes this distance should be greater than zero.
        """
        self.collision_distance: float = collision_distance
        """:field
        The time dt will be divided into the number of sub-steps given by this parameter.
        """
        self.substep_count: int = substep_count
        """:field
        The number of solver iterations to perform per-substep.
        """
        self.iteration_count: int = iteration_count
        """:field
        The viscous drag force. This applies a force proportional, and opposite to, the particle velocity.
        """
        self.damping: float = damping
        """:field
        The drag force applied to cloth particles.
        """
        self.drag: float = drag
        """:field
        Increases the radius used during contact finding against kinematic shapes.
        """
        self.shape_collision_margin: float = shape_collision_margin
        if planes is None:
            """:field
            Defines the boundary planes within which the particles can move.
            """
            self.planes: List[Dict[str, float]] = list()
        else:
            self.planes = planes
        """:field
        Controls how strongly particles hold each other together.
        """
        self.cohesion: float = cohesion
        """:field
        Controls how strongly particles attempt to minimize surface area.
        """
        self.surface_tension: float = surface_tension
        """:field
        Smoothes particle velocity using XSPH viscocity.
        """
        self.viscocity: float = viscocity
        """:field
        Increases vorticity by appying rotational foces to particles.
        """
        self.vorticity: float = vorticity
        """:field
        Gravity is scaled by this value for fluid particles.
        """
        self.buoyancy: float = buoyancy
        """:field
        Controls how strongly particles stick to surfaces they hit.
        """
        self.adhesion: float = adhesion
        """:field
        Controls level of anisotropy when rendering ellipsoids. Useful for fluids.
        """
        self.anisotropy_scale: float = anisotropy_scale
        """:field
        Maximum number of particles for the container.
        """
        self.max_particles: int = max_particles
        """:field
        Maximum number of neighbors for the container.
        """
        self.max_neighbors: int = max_neighbors
        """:field
        Particles with a velocity magnitude greater than this threshold will be considered fixed.
        """
        self.sleep_threshold: float = sleep_threshold
        """:field
        Coefficient of restitution used when colliding against shapes. Particle collisions are always inelastic.
        """
        self.restitution: float = restitution
