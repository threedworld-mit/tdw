# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.replicant_base_arm_command import ReplicantBaseArmCommand
from tdw.replicant.arm import Arm


class ReplicantSetGraspedObjectRotation(ReplicantBaseArmCommand):
    """
    Start to rotate a grasped object relative to the rotation of the hand. This will update per communicate() call until the object is dropped.
    """

    def __init__(self, id: int, arm: Arm, axis: str, angle: float, relative_to_hand: bool = True, set_status: bool = True):
        """
        :param id: The unique object ID.
        :param arm: The arm doing the action.
        :param axis: Rotate the object around this axis relative to the hand's rotation.
        :param angle: Rotate the object by this many degrees relative to the hand's rotation.
        :param relative_to_hand: If True, rotate the object relative to the hand that is holding it. If false, rotate relative to the Replicant.
        :param set_status: If True, when this command ends, it will set the Replicant output data's status.
        """

        super().__init__(arm=arm, id=id)
        """:field
        Rotate the object by this many degrees relative to the hand's rotation.
        """
        self.angle: float = angle
        """:field
        Rotate the object around this axis relative to the hand's rotation.
        """
        self.axis: str = axis
        """:field
        If True, rotate the object relative to the hand that is holding it. If false, rotate relative to the Replicant.
        """
        self.relative_to_hand: bool = relative_to_hand
        """:field
        If True, when this command ends, it will set the Replicant output data's status.
        """
        self.set_status: bool = set_status
