# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.create_obi_cloth_command import CreateObiClothCommand
from tdw.obi_data.cloth.cloth_material import ClothMaterial
from tdw.obi_data.cloth.sheet_type import SheetType
from tdw.obi_data.cloth.tether_particle_group import TetherParticleGroup
from tdw.obi_data.cloth.tether_type import TetherType
from typing import Dict


class CreateObiClothSheet(CreateObiClothCommand):
    """
    Create an Obi cloth sheet object.
    """

    def __init__(self, cloth_material: ClothMaterial, sheet_type: SheetType, tether_positions: Dict[TetherParticleGroup, TetherType] = None, position: Dict[str, float] = None, rotation: Dict[str, float] = None, id: int = 0, solver_id: int = 0):
        """
        :param cloth_material: The type of cloth "material", as defined by constraint settings.
        :param sheet_type: The type of cloth sheet to create.
        :param tether_positions: An dictionary of tether positions. Key = The particle group. Value = The tether position.
        :param position: The position of the Obi actor.
        :param rotation: The rotation of the Obi actor in Euler angles.
        :param id: The unique ID of the emitter.
        :param solver_id: The ID of the Obi solver.
        """

        super().__init__(cloth_material=cloth_material, position=position, rotation=rotation, id=id, solver_id=solver_id)
        """:field
        The type of cloth sheet to create.
        """
        self.sheet_type: SheetType = sheet_type
        if tether_positions is None:
            """:field
            An dictionary of tether positions. Key = The particle group. Value = The tether position.
            """
            self.tether_positions: Dict[TetherParticleGroup, TetherType] = dict()
        else:
            self.tether_positions = tether_positions
