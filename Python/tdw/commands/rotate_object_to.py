# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.object_command import ObjectCommand
from typing import Dict


class RotateObjectTo(ObjectCommand):
    """
    Set the rotation quaternion of the object.
    """

    def __init__(self, id: int, rotation: Dict[str, float], physics: bool = False, use_centroid: bool = False):
        """
        :param id: The unique object ID.
        :param rotation: The rotation quaternion.
        :param physics: This should almost always be False (the default). If True, apply a "physics-based" rotation to the object. This only works if the object has a rigidbody (i.e. is a model from a model library) and is slightly slower than a non-physics rotation. Set this to True only if you are having persistent and rare physics glitches.
        :param use_centroid: If false, rotate around the bottom-center position of the object. If true, rotate around the bottom-center position of the object and then teleport the object to its centroid (such that it rotates around the centroid).
        """

        super().__init__(id=id)
        """:field
        The rotation quaternion.
        """
        self.rotation: Dict[str, float] = rotation
        """:field
        This should almost always be False (the default). If True, apply a "physics-based" rotation to the object. This only works if the object has a rigidbody (i.e. is a model from a model library) and is slightly slower than a non-physics rotation. Set this to True only if you are having persistent and rare physics glitches.
        """
        self.physics: bool = physics
        """:field
        If false, rotate around the bottom-center position of the object. If true, rotate around the bottom-center position of the object and then teleport the object to its centroid (such that it rotates around the centroid).
        """
        self.use_centroid: bool = use_centroid
