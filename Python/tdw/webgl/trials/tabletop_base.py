# AUTOGENERATED FROM C#. DO NOT MODIFY.

from abc import ABC
from typing import List, Dict
from tdw.cardinal_direction import CardinalDirection


class TabletopBase(ABC):
    """
    An example Trial abstract base class. There is a table with objects on it and a first person avatar.
    """

    def __init__(self, random_seed: int = None, time: float = 30, scene_name: str = "box_room_2018", table_names: List[str] = None, model_names: List[str] = None, target_object_names: List[str] = None, target_object_ui_texts: List[str] = None, table_position_perturbation: float = 0, rotate_table: float = 0, avatar_directions: List[CardinalDirection] = None, avatar_distance: List[float] = None, avatar_perturbation: float = 0, avatar_rotation: float = 0, font_size: int = 24, font_color: Dict[str, float] = None, progress_bar_size: Dict[str, int] = None, progress_bar_underlay_color: Dict[str, float] = None, progress_bar_overlay_color: Dict[str, float] = None, table_extents_factor: float = 0.85, model_position_step: float = 0.05, model_position_perturbation: float = 0.0125, framerate: int = 60, render_quality: int = 5):
        """
        :param random_seed: The random seed. Can be null. If null, the seed is random.
        :param time: The total time in seconds that the user has to click the object.
        :param scene_name: The name of the scene.
        :param table_names: A list of names of table models. One of these will be randomly selected and added to the scene.
        :param model_names: A list of names of models that can be randomly added to the table.
        :param target_object_names: An array of target object model names. A random target object will be chosen from this array per trial.
        :param target_object_ui_texts: An array of target object model names as they will be displayed in UI text.
        :param table_position_perturbation: The table will be at a random position relative to (0, 0, 0). The position is calculated by getting a random position in a circle. The radius of the circle is between 0 and this value. Set this to 0 if you want the table to always be at (0, 0, 0).
        :param rotate_table: A value between 0 and 1 that defines the probability that the table will be rotated 90 degrees.
        :param avatar_directions: The avatar can spawn at any of these compass directions from the table.
        :param avatar_distance: The avatar will initially be at a distance from the table defined by these two values (min, max).
        :param avatar_perturbation: The avatar's position will be perturbed by a factor between 0 and this value, in meters.
        :param avatar_rotation: When the avatar is spawned, it will look at the center of the table and then turn between -avatar_rotation and avatar_rotation degrees.
        :param font_size: The font size.
        :param font_color: The font color.
        :param progress_bar_size: The size of the progress bar in pixels.
        :param progress_bar_underlay_color: The color of the progress bar underlay.
        :param progress_bar_overlay_color: The color of the progress bar overlay.
        :param table_extents_factor: When adding objects, shrink the table extents by this factor to prevent objects from falling off.
        :param model_position_step: Step each table position by this distance.
        :param model_position_perturbation: Perturb each table position by this factor.
        :param framerate: The target framerate.
        :param render_quality: The render quality (0 to 5, where 5 is best).
        """

        super().__init__(framerate=framerate, render_quality=render_quality)
        """:field
        The random seed. Can be null. If null, the seed is random.
        """
        self.random_seed: int = random_seed
        """:field
        The total time in seconds that the user has to click the object.
        """
        self.time: float = time
        """:field
        The name of the scene.
        """
        self.scene_name: str = scene_name
        if table_names is None:
            """:field
            A list of names of table models. One of these will be randomly selected and added to the scene.
            """
            self.table_names: List[str] = ["lg_table_marble_green"]
        else:
            self.table_names = table_names
        if model_names is None:
            """:field
            A list of names of models that can be randomly added to the table.
            """
            self.model_names: List[str] = ["servingfork", "spagetti-server", "spatula", "toaster_002", "skillet_open", "skillet_closed", "skillet_open_no_lid", "whisk", "kettle"]
        else:
            self.model_names = model_names
        if target_object_names is None:
            """:field
            An array of target object model names. A random target object will be chosen from this array per trial.
            """
            self.target_object_names: List[str] = ["vase_01", "vase_02", "vase_03"]
        else:
            self.target_object_names = target_object_names
        if target_object_ui_texts is None:
            """:field
            An array of target object model names as they will be displayed in UI text.
            """
            self.target_object_ui_texts: List[str] = ["vase", "vase", "vase"]
        else:
            self.target_object_ui_texts = target_object_ui_texts
        """:field
        The table will be at a random position relative to (0, 0, 0). The position is calculated by getting a random position in a circle. The radius of the circle is between 0 and this value. Set this to 0 if you want the table to always be at (0, 0, 0).
        """
        self.table_position_perturbation: float = table_position_perturbation
        """:field
        A value between 0 and 1 that defines the probability that the table will be rotated 90 degrees.
        """
        self.rotate_table: float = rotate_table
        if avatar_directions is None:
            """:field
            The avatar can spawn at any of these compass directions from the table.
            """
            self.avatar_directions: List[CardinalDirection] = [CardinalDirection.north, CardinalDirection.south, CardinalDirection.east, CardinalDirection.west]
        else:
            self.avatar_directions = avatar_directions
        if avatar_distance is None:
            """:field
            The avatar will initially be at a distance from the table defined by these two values (min, max).
            """
            self.avatar_distance: List[float] = [1, 1.5]
        else:
            self.avatar_distance = avatar_distance
        """:field
        The avatar's position will be perturbed by a factor between 0 and this value, in meters.
        """
        self.avatar_perturbation: float = avatar_perturbation
        """:field
        When the avatar is spawned, it will look at the center of the table and then turn between -avatar_rotation and avatar_rotation degrees.
        """
        self.avatar_rotation: float = avatar_rotation
        """:field
        The font size.
        """
        self.font_size: int = font_size
        if font_color is None:
            """:field
            The font color.
            """
            self.font_color: Dict[str, float] = {"r": 1, "g": 0, "b": 0, "a": 1}
        else:
            self.font_color = font_color
        if progress_bar_size is None:
            """:field
            The size of the progress bar in pixels.
            """
            self.progress_bar_size: Dict[str, int] = {"x": 2, "y": 200, "z": 24}
        else:
            self.progress_bar_size = progress_bar_size
        if progress_bar_underlay_color is None:
            """:field
            The color of the progress bar underlay.
            """
            self.progress_bar_underlay_color: Dict[str, float] = {"r": 0, "g": 0, "b": 0, "a": 1}
        else:
            self.progress_bar_underlay_color = progress_bar_underlay_color
        if progress_bar_overlay_color is None:
            """:field
            The color of the progress bar overlay.
            """
            self.progress_bar_overlay_color: Dict[str, float] = {"r": 1, "g": 1, "b": 1, "a": 1}
        else:
            self.progress_bar_overlay_color = progress_bar_overlay_color
        """:field
        When adding objects, shrink the table extents by this factor to prevent objects from falling off.
        """
        self.table_extents_factor: float = table_extents_factor
        """:field
        Step each table position by this distance.
        """
        self.model_position_step: float = model_position_step
        """:field
        Perturb each table position by this factor.
        """
        self.model_position_perturbation: float = model_position_perturbation
