# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.command import Command
from typing import Dict


class PerlinNoiseTerrain(Command):
    """
    Initialize a scene environment with procedurally generated "terrain" using Perlin noise. This command will return Meshes output data which will contain the mesh data of the terrain.
    """

    def __init__(self, size: Dict[str, float], origin: Dict[str, float] = None, subdivisions: int = 1, turbulence: float = 1, max_y: float = 1, visual_material: str = "", color: Dict[str, float] = None, texture_scale: Dict[str, float] = None, dynamic_friction: float = 0.25, static_friction: float = 0.4, bounciness: float = 0.2):
        """
        :param size: The (length, width) of the terrain in meters.
        :param origin: The offset of the perlin noise. Set this to a random number to generate random noise.
        :param subdivisions: The number of subdivisions of the mesh. Increase this number to smooth out the mesh.
        :param turbulence: How "hilly" the terrain is.
        :param max_y: The maximum height of the terrain.
        :param visual_material: The visual material for the terrain. This visual material must have already been added to the simulation via the <ulink url="#add_material">add_material</ulink> command or #../python/controller.md "Controller.get_add_material()". If empty, a gray default material will be used.
        :param color: The color of the terrain.
        :param texture_scale: If visual_material isn't an empty string, this will set the UV texture scale.
        :param dynamic_friction: The dynamic friction of the terrain.
        :param static_friction: The static friction of the terrain.
        :param bounciness: The bounciness of the terrain.
        """

        super().__init__()
        """:field
        The (length, width) of the terrain in meters.
        """
        self.size: Dict[str, float] = size
        if origin is None:
            """:field
            The offset of the perlin noise. Set this to a random number to generate random noise.
            """
            self.origin: Dict[str, float] = {"x": 0, "y": 0}
        else:
            self.origin = origin
        """:field
        The number of subdivisions of the mesh. Increase this number to smooth out the mesh.
        """
        self.subdivisions: int = subdivisions
        """:field
        How "hilly" the terrain is.
        """
        self.turbulence: float = turbulence
        """:field
        The maximum height of the terrain.
        """
        self.max_y: float = max_y
        """:field
        The visual material for the terrain. This visual material must have already been added to the simulation via the <ulink url="#add_material">add_material</ulink> command or #../python/controller.md "Controller.get_add_material()". If empty, a gray default material will be used.
        """
        self.visual_material: str = visual_material
        if color is None:
            """:field
            The color of the terrain.
            """
            self.color: Dict[str, float] = {"r": 1, "g": 1, "b": 1, "a": 1}
        else:
            self.color = color
        if texture_scale is None:
            """:field
            If visual_material isn't an empty string, this will set the UV texture scale.
            """
            self.texture_scale: Dict[str, float] = {"x": 1, "y": 1}
        else:
            self.texture_scale = texture_scale
        """:field
        The dynamic friction of the terrain.
        """
        self.dynamic_friction: float = dynamic_friction
        """:field
        The static friction of the terrain.
        """
        self.static_friction: float = static_friction
        """:field
        The bounciness of the terrain.
        """
        self.bounciness: float = bounciness
