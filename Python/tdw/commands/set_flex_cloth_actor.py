# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.set_flex_actor import SetFlexActor


class SetFlexClothActor(SetFlexActor):
    """
    Create or adjust a FlexClothActor for the object.
    """

    def __init__(self, id: int, mesh_tesselation: int = 1, stretch_stiffness: float = 0.1, bend_stiffness: float = 0.1, tether_stiffness: float = 0.0, tether_give: float = 0.0, pressure: float = 0.0, self_collide: bool = False, mass_scale: float = 1, draw_particles: bool = False):
        """
        :param id: The unique object ID.
        :param mesh_tesselation: The Tesselation factor for the cloth.
        :param stretch_stiffness: The stiffness coefficient for stretch constraints.
        :param bend_stiffness: The stiffness coefficient used for bending constraints.
        :param tether_stiffness: If > 0.0f then the function will create tethers attached to particles with zero inverse mass. These are unilateral, long-range attachments, which can greatly reduce stretching even at low iteration counts.
        :param tether_give: Because tether constraints are so effective at reducing stiffness, it can be useful to allow a small amount of extension before the constraint activates.
        :param pressure: If > 0.0f then a volume (pressure) constraint will also be added to the asset. The rest volume and stiffness will be automatically computed by this function.
        :param self_collide: If true, the object will handle self-collisions.
        :param mass_scale: The mass scale factor.
        :param draw_particles: Debug drawing of particles.
        """

        super().__init__(mass_scale=mass_scale, draw_particles=draw_particles, id=id)
        """:field
        The Tesselation factor for the cloth.
        """
        self.mesh_tesselation: int = mesh_tesselation
        """:field
        The stiffness coefficient for stretch constraints.
        """
        self.stretch_stiffness: float = stretch_stiffness
        """:field
        The stiffness coefficient used for bending constraints.
        """
        self.bend_stiffness: float = bend_stiffness
        """:field
        If > 0.0f then the function will create tethers attached to particles with zero inverse mass. These are unilateral, long-range attachments, which can greatly reduce stretching even at low iteration counts.
        """
        self.tether_stiffness: float = tether_stiffness
        """:field
        Because tether constraints are so effective at reducing stiffness, it can be useful to allow a small amount of extension before the constraint activates.
        """
        self.tether_give: float = tether_give
        """:field
        If > 0.0f then a volume (pressure) constraint will also be added to the asset. The rest volume and stiffness will be automatically computed by this function.
        """
        self.pressure: float = pressure
        """:field
        If true, the object will handle self-collisions.
        """
        self.self_collide: bool = self_collide
