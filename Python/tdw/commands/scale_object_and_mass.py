# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.object_type_command import ObjectTypeCommand
from typing import Dict


class ScaleObjectAndMass(ObjectTypeCommand):
    """
    Scale the object by a factor from its current scale. Scale its mass proportionally. This command assumes that a canonical mass has already been set.
    """

    def __init__(self, id: int, scale_factor: Dict[str, float] = None):
        """
        :param id: The unique object ID.
        :param scale_factor: Multiply the scale of the object by this vector. (For example, if scale_factor is (2,2,2), then the object's current size will double.)
        """

        super().__init__(id=id)
        if scale_factor is None:
            """:field
            Multiply the scale of the object by this vector. (For example, if scale_factor is (2,2,2), then the object's current size will double.)
            """
            self.scale_factor: Dict[str, float] = {"x": 1, "y": 1, "z": 1}
        else:
            self.scale_factor = scale_factor
