# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.add_model_command import AddModelCommand
from typing import Dict, List


class AddObject(AddModelCommand):
    """
    Add a single object from a model library or from a local asset bundle to the scene.
    """

    def __init__(self, url: str, name: str, id: int, position: Dict[str, float] = None, rotation: Dict[str, float] = None, scale_factor: float = 1, category: str = "", affordance_points: List[Dict[str, float]] = None):
        """
        :param url: The location of the asset bundle. If the asset bundle is remote, this must be a valid URL. If the asset is a local file, this must begin with the prefix "file:///"
        :param name: The name of the asset bundle.
        :param id: The unique ID of the object.
        :param position: Position of the object.
        :param rotation: Rotation of the object, in Euler angles.
        :param scale_factor: The default scale factor of a model.
        :param category: The model category.
        :param affordance_points: A list of affordance points. Can be empty.
        """

        super().__init__(id=id, scale_factor=scale_factor, category=category, affordance_points=affordance_points, name=name, url=url)
        if position is None:
            """:field
            Position of the object.
            """
            self.position: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.position = position
        if rotation is None:
            """:field
            Rotation of the object, in Euler angles.
            """
            self.rotation: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.rotation = rotation
