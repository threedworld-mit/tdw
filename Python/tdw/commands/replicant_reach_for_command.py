# AUTOGENERATED FROM C#. DO NOT MODIFY.

from abc import ABC
from tdw.commands.replicant_arm_motion_command import ReplicantArmMotionCommand
from tdw.replicant.arm import Arm
from typing import Dict


class ReplicantReachForCommand(ReplicantArmMotionCommand, ABC):
    """
    These commands instruct a replicant to start to reach for a target.
    """

    def __init__(self, id: int, arm: Arm, duration: float, max_distance: float = 1.5, arrived_at: float = 0.02, set_status: bool = True, offset: Dict[str, float] = None):
        """
        :param id: The unique object ID.
        :param arm: The arm doing the action.
        :param duration: The duration of the motion in seconds.
        :param max_distance: The maximum distance that the Replicant can reach.
        :param arrived_at: If the hand is this distance from the target position or less, the action succeeded.
        :param set_status: If True, when this command ends, it will set the Replicant output data's status.
        :param offset: This offset will be applied to the target position.
        """

        super().__init__(duration=duration, arm=arm, id=id)
        """:field
        The maximum distance that the Replicant can reach.
        """
        self.max_distance: float = max_distance
        """:field
        If the hand is this distance from the target position or less, the action succeeded.
        """
        self.arrived_at: float = arrived_at
        """:field
        If True, when this command ends, it will set the Replicant output data's status.
        """
        self.set_status: bool = set_status
        if offset is None:
            """:field
            This offset will be applied to the target position.
            """
            self.offset: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.offset = offset
