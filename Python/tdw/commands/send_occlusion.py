# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.send_avatars_command import SendAvatarsCommand
from typing import List


class SendOcclusion(SendAvatarsCommand):
    """
    Send the extent to which the scene environment is occluding objects in the frame.
    """

    def __init__(self, object_ids: List[int] = None, ids: List[str] = None, frequency: str = "once"):
        """
        :param object_ids: If None or empty, all objects in the camera viewport will be tested for occlusion. Otherwise, if an object isn't in this list, it will be treated as an occluder (if this was a _mask pass, it would appear black instead of red). This parameter can be used to test occlusion for specific objects, but it is somewhat slower than testing for all.
        :param ids: The IDs of the avatars. If this list is undefined or empty, the build will return data for all avatars.
        :param frequency: The frequency at which data is sent.
        """

        super().__init__(ids=ids, frequency=frequency)
        if object_ids is None:
            """:field
            If None or empty, all objects in the camera viewport will be tested for occlusion. Otherwise, if an object isn't in this list, it will be treated as an occluder (if this was a _mask pass, it would appear black instead of red). This parameter can be used to test occlusion for specific objects, but it is somewhat slower than testing for all.
            """
            self.object_ids: List[int] = [0]
        else:
            self.object_ids = object_ids
