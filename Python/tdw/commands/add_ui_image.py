# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.add_ui_command import AddUiCommand
from typing import Dict


class AddUiImage(AddUiCommand):
    """
    Add a UI image to the scene. Note that the size parameter must match the actual pixel size of the image.
    """

    def __init__(self, id: int, size: Dict[str, int], image: str, rgba: bool = True, scale_factor: Dict[str, float] = None, anchor: Dict[str, float] = None, pivot: Dict[str, float] = None, position: Dict[str, int] = None, color: Dict[str, float] = None, raycast_target: bool = True, canvas_id: int = 0):
        """
        :param id: The unique ID of the UI element.
        :param size: The actual pixel size of the image.
        :param image: base64 string representation of the image byte array.
        :param rgba: If True, this is an RGBA image. If False, this is an RGB image.
        :param scale_factor: Scale the image by this factor.
        :param anchor: The anchor of the UI element. The values must be from 0 (left or bottom) to 1 (right or top). By default, the anchor is in the center.
        :param pivot: The pivot of the UI element. The values must be from 0 (left or bottom) to 1 (right or top). By default, the pivot is in the center.
        :param position: The anchor position of the UI element in pixels. x is lateral, y is vertical. The anchor position is not the true pixel position. For example, if the anchor is {"x": 0, "y": 0} and the position is {"x": 0, "y": 0}, the UI element will be in the bottom-left of the screen.
        :param color: The color of the UI element.
        :param raycast_target: If True, raycasts will hit the UI element.
        :param canvas_id: The unique ID of the UI canvas.
        """

        super().__init__(anchor=anchor, pivot=pivot, position=position, color=color, raycast_target=raycast_target, id=id, canvas_id=canvas_id)
        """:field
        base64 string representation of the image byte array.
        """
        self.image: str = image
        """:field
        The actual pixel size of the image.
        """
        self.size: Dict[str, int] = size
        """:field
        If True, this is an RGBA image. If False, this is an RGB image.
        """
        self.rgba: bool = rgba
        if scale_factor is None:
            """:field
            Scale the image by this factor.
            """
            self.scale_factor: Dict[str, float] = {"x": 1, "y": 1}
        else:
            self.scale_factor = scale_factor
