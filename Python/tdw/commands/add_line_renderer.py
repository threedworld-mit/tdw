# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.line_renderer_command import LineRendererCommand
from typing import Dict, List


class AddLineRenderer(LineRendererCommand):
    """
    Add a 3D line to the scene.
    """

    def __init__(self, id: int, end_color: Dict[str, float], start_color: Dict[str, float], points: List[Dict[str, float]], start_width: float = 1, end_width: float = 1, loop: bool = False, position: Dict[str, float] = None):
        """
        :param id: The ID of the non-physics object.
        :param end_color: The end color of the line. If it's different than start_color, the colors will have an even gradient along the line.
        :param start_color: The start color of the line.
        :param points: The points or vertices along the line. This must have at least 2 elements.
        :param start_width: The start width of the line in meters.
        :param end_width: The end width of the line in meters.
        :param loop: If True, the start and end positions of the line will connect together to form a continuous loop.
        :param position: The position of the line.
        """

        super().__init__(id=id)
        """:field
        The points or vertices along the line. This must have at least 2 elements.
        """
        self.points: List[Dict[str, float]] = points
        """:field
        The start color of the line.
        """
        self.start_color: Dict[str, float] = start_color
        """:field
        The end color of the line. If it's different than start_color, the colors will have an even gradient along the line.
        """
        self.end_color: Dict[str, float] = end_color
        """:field
        The start width of the line in meters.
        """
        self.start_width: float = start_width
        """:field
        The end width of the line in meters.
        """
        self.end_width: float = end_width
        """:field
        If True, the start and end positions of the line will connect together to form a continuous loop.
        """
        self.loop: bool = loop
        if position is None:
            """:field
            The position of the line.
            """
            self.position: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.position = position
