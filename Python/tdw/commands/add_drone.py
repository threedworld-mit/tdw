# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.add_object_command import AddObjectCommand
from typing import Dict


class AddDrone(AddObjectCommand):
    """
    Add a drone to the scene.
    """

    def __init__(self, url: str, name: str, id: int, position: Dict[str, float] = None, rotation: Dict[str, float] = None, forward_speed: float = 7, backward_speed: float = 5, right_speed: float = 5, left_speed: float = 5, rise_speed: float = 5, drop_speed: float = 5, acceleration: float = 0.3, deceleration: float = 0.2, stability: float = 0.1, turn_sensitivity: float = 2, motor_on: bool = True, enable_lights: bool = False):
        """
        :param url: The location of the asset bundle. If the asset bundle is remote, this must be a valid URL. If the asset is a local file, this must begin with the prefix "file:///"
        :param name: The name of the asset bundle.
        :param id: The unique ID of the drone.
        :param position: The position of the drone.
        :param rotation: The rotation of the drone, in Euler angles.
        :param forward_speed: Sets the drone's max forward speed.
        :param backward_speed: Sets the drone's max backward speed.
        :param right_speed: Sets the drone's max right strafe speed.
        :param left_speed: Sets the drone's max left strafe speed.
        :param rise_speed: Sets the drone's max vertical rise speed.
        :param drop_speed: Sets the drone's max vertical drop speed.
        :param acceleration: Sets the drone's acceleration.
        :param deceleration: Sets the drone's deceleration.
        :param stability: A factor that determinates how easily the drone is affected by outside forces.
        :param turn_sensitivity: Sets the drone's rotation speed.
        :param motor_on: Sets whether or not the drone is active on start.
        :param enable_lights: Sets whether or not the drone's lights are on.
        """

        super().__init__(name=name, url=url)
        """:field
        The unique ID of the drone.
        """
        self.id: int = id
        if position is None:
            """:field
            The position of the drone.
            """
            self.position: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.position = position
        if rotation is None:
            """:field
            The rotation of the drone, in Euler angles.
            """
            self.rotation: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.rotation = rotation
        """:field
        Sets the drone's max forward speed.
        """
        self.forward_speed: float = forward_speed
        """:field
        Sets the drone's max backward speed.
        """
        self.backward_speed: float = backward_speed
        """:field
        Sets the drone's max right strafe speed.
        """
        self.right_speed: float = right_speed
        """:field
        Sets the drone's max left strafe speed.
        """
        self.left_speed: float = left_speed
        """:field
        Sets the drone's max vertical rise speed.
        """
        self.rise_speed: float = rise_speed
        """:field
        Sets the drone's max vertical drop speed.
        """
        self.drop_speed: float = drop_speed
        """:field
        Sets the drone's acceleration.
        """
        self.acceleration: float = acceleration
        """:field
        Sets the drone's deceleration.
        """
        self.deceleration: float = deceleration
        """:field
        A factor that determinates how easily the drone is affected by outside forces.
        """
        self.stability: float = stability
        """:field
        Sets the drone's rotation speed.
        """
        self.turn_sensitivity: float = turn_sensitivity
        """:field
        Sets whether or not the drone is active on start.
        """
        self.motor_on: bool = motor_on
        """:field
        Sets whether or not the drone's lights are on.
        """
        self.enable_lights: bool = enable_lights
