# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.robot_joint_command import RobotJointCommand


class SetRobotJointPhysicMaterial(RobotJointCommand):
    """
    Set the physic material of a robot joint and apply friction and bounciness values to the joint. These settings can be overriden by sending the command again.
    """

    def __init__(self, joint_id: int, bounciness: float, static_friction: float, dynamic_friction: float, id: int = 0):
        """
        :param joint_id: The ID of the joint.
        :param bounciness: The bounciness of the joint. A higher value means that the joint will bounce without losing much energy. Must be between 0 and 1.
        :param static_friction: Friction when the joint is not moving. A higher value means that a lot of force will be needed to make the joint start moving. Must be between 0 and 1.
        :param dynamic_friction: Friction when the joint is already moving. A higher value means that the joint will come to rest very quickly. Must be between 0 and 1.
        :param id: The ID of the robot in the scene.
        """

        super().__init__(joint_id=joint_id, id=id)
        """:field
        Friction when the joint is already moving. A higher value means that the joint will come to rest very quickly. Must be between 0 and 1.
        """
        self.dynamic_friction: float = dynamic_friction
        """:field
        Friction when the joint is not moving. A higher value means that a lot of force will be needed to make the joint start moving. Must be between 0 and 1.
        """
        self.static_friction: float = static_friction
        """:field
        The bounciness of the joint. A higher value means that the joint will bounce without losing much energy. Must be between 0 and 1.
        """
        self.bounciness: float = bounciness
