# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.object_type_command import ObjectTypeCommand
from typing import Dict


class AddConstantForce(ObjectTypeCommand):
    """
    Add a constant force to an object. Every frame, this force will be applied to the Rigidbody. Unlike other force commands, this command will provide gradual acceleration rather than immediate impulse; it is thus more useful for animation than a deterministic physics simulation.
    """

    def __init__(self, id: int, force: Dict[str, float] = None, relative_force: Dict[str, float] = None, torque: Dict[str, float] = None, relative_torque: Dict[str, float] = None):
        """
        :param id: The unique object ID.
        :param force: The vector of a force to be applied in world space.
        :param relative_force: The vector of a force to be applied in the object's local space.
        :param torque: The vector of a torque, applied in world space.
        :param relative_torque: The vector of a torque, applied in local space.
        """

        super().__init__(id=id)
        if force is None:
            """:field
            The vector of a force to be applied in world space.
            """
            self.force: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.force = force
        if relative_force is None:
            """:field
            The vector of a force to be applied in the object's local space.
            """
            self.relative_force: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.relative_force = relative_force
        if torque is None:
            """:field
            The vector of a torque, applied in world space.
            """
            self.torque: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.torque = torque
        if relative_torque is None:
            """:field
            The vector of a torque, applied in local space.
            """
            self.relative_torque: Dict[str, float] = {"x": 0, "y": 0, "z": 0}
        else:
            self.relative_torque = relative_torque
