# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBOutput

import tdw.flatbuffers

class AvatarTransformMatrices(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAvatarTransformMatrices(cls, buf, offset):
        n = tdw.flatbuffers.encode.Get(tdw.flatbuffers.packer.uoffset, buf, offset)
        x = AvatarTransformMatrices()
        x.Init(buf, n + offset)
        return x

    # AvatarTransformMatrices
    def Init(self, buf, pos):
        self._tab = tdw.flatbuffers.table.Table(buf, pos)

    # AvatarTransformMatrices
    def AvatarIds(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AvatarTransformMatrices
    def AvatarIdsLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AvatarTransformMatrices
    def AvatarMatrices(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, a + tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AvatarTransformMatrices
    def AvatarMatricesAsNumpy(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(tdw.flatbuffers.number_types.Float32Flags, o)
        return 0

    # AvatarTransformMatrices
    def AvatarMatricesLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AvatarTransformMatrices
    def SensorContainerMatrices(self, j):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(tdw.flatbuffers.number_types.Float32Flags, a + tdw.flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # AvatarTransformMatrices
    def SensorContainerMatricesAsNumpy(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(tdw.flatbuffers.number_types.Float32Flags, o)
        return 0

    # AvatarTransformMatrices
    def SensorContainerMatricesLength(self):
        o = tdw.flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def AvatarTransformMatricesStart(builder): builder.StartObject(3)
def AvatarTransformMatricesAddAvatarIds(builder, avatarIds): builder.PrependUOffsetTRelativeSlot(0, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(avatarIds), 0)
def AvatarTransformMatricesStartAvatarIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AvatarTransformMatricesAddAvatarMatrices(builder, avatarMatrices): builder.PrependUOffsetTRelativeSlot(1, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(avatarMatrices), 0)
def AvatarTransformMatricesStartAvatarMatricesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AvatarTransformMatricesAddSensorContainerMatrices(builder, sensorContainerMatrices): builder.PrependUOffsetTRelativeSlot(2, tdw.flatbuffers.number_types.UOffsetTFlags.py_type(sensorContainerMatrices), 0)
def AvatarTransformMatricesStartSensorContainerMatricesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def AvatarTransformMatricesEnd(builder): return builder.EndObject()
