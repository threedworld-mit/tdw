# AUTOGENERATED FROM C#. DO NOT MODIFY.

from tdw.commands.magnebot_wheels_turn_command import MagnebotWheelsTurnCommand
from typing import Dict


class SetMagnebotWheelsDuringTurnTo(MagnebotWheelsTurnCommand):
    """
    Set the friction coefficients of the Magnebot's wheels during a turn_to() action, given a target angle. The friction coefficients will increase as the Magnebot approaches the target angle and the command will announce if the Magnebot aligns with the target angle. Because the Magnebot will move slightly while rotating, this command has an additional position parameter to re-check for alignment with the target.
    """

    def __init__(self, origin: Dict[str, float], angle: float, position: Dict[str, float], brake_angle: float = 0.1, arrived_at: float = 0.01, minimum_friction: float = 0.05, maximum_friction: float = 1, id: int = 0):
        """
        :param origin: The starting forward directional vector of the Magnebot at the start of the action (not its current forward directional vector).
        :param angle: The target angle of the Magnebot in degrees.
        :param position: The target position that the Magnebot is turning to.
        :param brake_angle: The angle at which the Magnebot should start to brake, in degrees.
        :param arrived_at: The threshold for determining whether the Magnebot is at the target.
        :param minimum_friction: The minimum friction coefficient for the wheels. The default value (0.05) is also the default friction coefficient of the wheels.
        :param maximum_friction: The maximum friction coefficient for the wheels when slowing down.
        :param id: The ID of the robot in the scene.
        """

        super().__init__(angle=angle, origin=origin, brake_angle=brake_angle, arrived_at=arrived_at, minimum_friction=minimum_friction, maximum_friction=maximum_friction, id=id)
        """:field
        The target position that the Magnebot is turning to.
        """
        self.position: Dict[str, float] = position
